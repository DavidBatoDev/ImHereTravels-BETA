rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection rules
    match /users/{userId} {
      // Users can read and write their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow users to create their profile on signup
      allow create: if request.auth != null && 
                   request.auth.uid == userId &&
                   isValidUserData(request.resource.data);
      
      // Allow users to update their own profile with valid data
      allow update: if request.auth != null && 
                   request.auth.uid == userId &&
                   isValidUserUpdate(request.resource.data, resource.data);
    }
    
    // Admin users can read all user profiles (for admin panel)
    match /users/{userId} {
      allow read: if request.auth != null && 
                 isAdmin(request.auth.uid);
    }
    
    // Bookings collection (future use)
    match /bookings/{bookingId} {
      // Users can read their own bookings
      allow read: if request.auth != null && 
                 request.auth.uid == resource.data.userId;
      
      // Users can create bookings for themselves
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      
      // Admins can read and modify all bookings
      allow read, write: if request.auth != null && 
                        isAdmin(request.auth.uid);
    }
    
    // Tours collection (future use) - read-only for users
    match /tours/{tourId} {
      allow read: if true; // Public read access for tours
      allow write: if request.auth != null && 
                  isAdmin(request.auth.uid);
    }
    
    // Email Templates - Users can only access their own templates
    match /emailTemplates/{templateId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.metadata.createdBy || 
         request.auth.token.admin == true);
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.metadata.createdBy;
    }
    
    // Default rule - deny all
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Helper functions
    function isAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }
    
    function isValidUserData(data) {
      return data.keys().hasAll(['uid', 'email', 'displayName', 'createdAt', 'updatedAt', 'isActive', 'role']) &&
             data.uid is string &&
             data.email is string &&
             data.displayName is string &&
             data.role in ['user', 'admin', 'agent'] &&
             data.isActive is bool;
    }
    
    function isValidUserUpdate(newData, existingData) {
      // Prevent users from changing critical fields
      return newData.uid == existingData.uid &&
             newData.email == existingData.email &&
             newData.createdAt == existingData.createdAt &&
             newData.role == existingData.role &&
             // Allow updating other fields
             newData.keys().hasAll(['uid', 'email', 'displayName', 'updatedAt', 'isActive', 'role']);
    }
  }
}